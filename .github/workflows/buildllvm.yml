name: BuildLLVM

on:
  push:
    branches: [ "test-build-llvm" ]

  workflow_dispatch:
    inputs:
      release-version:
        description: 'Release Version'
        required: true
        type: string
      runs-on:
        description: "Runner to use for the build"
        required: true
        type: choice
        options:
          - ubuntu-22.04
          - ubuntu-22.04-arm
          - macos-13 # x86_64
          - macos-14 # arm64

jobs:
  prepare:
    name: Prepare to build binaries
    runs-on: ${{ inputs.runs-on }}
    outputs:
      release-version: ${{ steps.vars.outputs.release-version }}
      ref: ${{ steps.vars.outputs.ref }}
      #upload: ${{ steps.vars.outputs.upload }}
      target-cmake-flags: ${{ steps.vars.outputs.target-cmake-flags }}
      #build-flang: ${{ steps.vars.outputs.build-flang }}
      #enable-pgo: ${{ steps.vars.outputs.enable-pgo }}
      release-binary-basename: ${{ steps.vars.outputs.release-binary-basename }}
      release-binary-filename: ${{ steps.vars.outputs.release-binary-filename }}

    steps:
    # It's good practice to use setup-python, but this is also required on macos-14
    # due to https://github.com/actions/runner-images/issues/10385
    - uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f
      with:
        python-version: '3.12'

    - name: Checkout LLVM
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        repository: 'llvm/llvm-project'
        ref: 'llvmorg-${{ inputs.release-version }}'
        path: 'llvmproj'
        clean: false
        fetch-depth: 1

    - name: Install Dependencies
      shell: bash
      run: |
        pip install --require-hashes -r ./llvmproj/llvm/utils/git/requirements.txt

    - name: Collect Variables
      id: vars
      shell: bash
      run: |
        trimmed=$(echo ${{ inputs.release-version }} | xargs)
        release_version="$trimmed"
        ref="llvmorg-$release_version"
        upload="false"

        echo "release-version=$release_version">> $GITHUB_OUTPUT
        echo "ref=$ref" >> $GITHUB_OUTPUT
        echo "upload=$upload" >> $GITHUB_OUTPUT

        release_binary_basename="LLVM-$release_version-${{ runner.os }}-${{ runner.arch }}"
        echo "release-binary-basename=$release_binary_basename" >> $GITHUB_OUTPUT
        echo "release-binary-filename=$release_binary_basename.tar.xz" >> $GITHUB_OUTPUT

        # Detect necessary CMake flags
        target="${{ runner.os }}-${{ runner.arch }}"

        echo "enable-pgo=false" >> $GITHUB_OUTPUT
        target_cmake_flags="-DLLVM_RELEASE_ENABLE_PGO=OFF"
        # The macOS builds try to cross compile some libraries so we need to
        # add extra CMake args to disable them.
        # See https://github.com/llvm/llvm-project/issues/99767
        if [ "${{ runner.os }}" = "macOS" ]; then
          target_cmake_flags="$target_cmake_flags -DCOMPILER_RT_ENABLE_IOS=OFF"
          if [ "${{ runner.arch }}" = "ARM64" ]; then
            arches=arm64
          else
            arches=x86_64
          fi
          target_cmake_flags="$target_cmake_flags -DDARWIN_osx_ARCHS=$arches -DDARWIN_osx_BUILTIN_ARCHS=$arches"
        fi

        build_flang="false"

        if [ "${{ runner.os }}" = "Windows" ]; then
          # The build times out on Windows, so we need to disable LTO.
          target_cmake_flags="$target_cmake_flags -DLLVM_RELEASE_ENABLE_LTO=OFF"
        fi

        echo "target-cmake-flags=$target_cmake_flags" >> $GITHUB_OUTPUT
        echo "build-flang=$build_flang" >> $GITHUB_OUTPUT

        
  build-llvm-clang:
    name: "Build LLVM and Clang"
    needs: prepare
    runs-on: ${{ inputs.runs-on }}
    steps:

    - name: Install Ninja
      uses: llvm/actions/install-ninja@22e9f909d35b50bd1181709564bfe816eaeaae81 # main

    - name: Install mold
      uses: rui314/setup-mold@v1
      with:
        make-default: false  # /usr/local/bin/mold

    - name: Checkout LLVM
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        repository: 'llvm/llvm-project'
        ref: ${{ needs.prepare.outputs.ref }}
        path: 'llvmproj'
        clean: false
        fetch-depth: 1

    - name: Build Clang
      id: build
      shell: bash
      run: |
        # There were some issues on the ARM64 MacOS runners with trying to build x86 object,
        # so we need to set some extra cmake flags to disable this.
        cmake -G Ninja -S llvmproj/llvm -B llvmproj/_build \
            ${{ needs.prepare.outputs.target-cmake-flags }} \
            -C llvmproj/clang/cmake/caches/Release.cmake \
            -DLLVM_PARALLEL_LINK_JOBS=1 \
            -DCPACK_PACKAGE_FILE_NAME="${{ needs.prepare.outputs.release-binary-basename }}" \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DLLVM_TARGETS_TO_BUILD=host \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF \
            -DLLVM_BUILD_LLVM_DYLIB=ON \
            -DLLVM_LINK_LLVM_DYLIB=ON \
            -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
            -DLLVM_ENABLE_ZSTD=OFF \
            -DLLVM_ENABLE_LIBXML2=OFF \
            -DLLVM_ENABLE_CURL=OFF \
            -DLLVM_ENABLE_HTTPLIB=OFF \
            -DLLVM_ENABLE_TERMINFO=OFF \
            -DLLVM_USE_LINKER=mold \
            -DLLVM_ENABLE_LIBCXX=ON \
            -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
            -DLLVM_ENABLE_PROJECTS="llvm;clang" \
            -DCPACK_GENERATOR=TXZ \
            -DCPACK_ARCHIVE_THREADS=0
            #-DLLVM_ENABLE_RUNTIMES="compiler-rt;libc;libcxx;libcxxabi;libunwind" \
        ninja -v -C llvmproj/_build
        # There is a race condition on the MacOS builders and this command is here
        # to help debug that when it happens.
        ls -ltr llvmproj/_build


    - name: Build Release Package
      shell: bash
      run: |
        which cmake
        ninja -C llvmproj/_build package

        # Copy Release artifact to the workspace so it is easier to upload.
        # This is necessary, because on Windows, the build-prefix path can
        # only be used on bash steps, because it uses the form of /d/files/
        # and other steps expect D:\files.
        ls llvmproj/_build/tools/clang/*-bins/
        mv llvmproj/_build/tools/clang/stage2-bins/${{ needs.prepare.outputs.release-binary-filename }} .

    - uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 #v4.3.0
      with:
        name: ${{ runner.os }}-${{ runner.arch }}-release-binary
        # Due to path differences on Windows when running in bash vs running on node,
        # we need to search for files in the current workspace.
        path: |
          ${{ needs.prepare.outputs.release-binary-filename }}

